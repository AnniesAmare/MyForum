@page "/postview"
@page "/postview/{Pid:int}"
@using MyForum.Data
@using MyForum.Data.MyForum
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<MyForumService>
<h1>Post</h1>
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        @if ( forumposts == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>                        
                        <th>Title</th>
                        <th>Date</th>
                        <th>Username</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @*The posts that the logged in user owns*@
                    @foreach (var post in forumposts)
                    {     
                        <tr>
                            <td><h4>@post.Title</h4></td>
                            <td>@post.Date?.ToShortDateString()</td>
                            <td>@post.UserName</td>
                        </tr>
                        <tr>
                            <td colspan="2">@post.Content</td>
                            <td>
                                @if (post.UserName == UserIdentityName)
                                {
                                    <button class="btn btn-primary"
                                    @onclick="(() => EditPost(post))">
                                        Edit
                                    </button>
                                }

                            </td>
                        </tr>                       
                    }                   
                </tbody>
            </table>
        }
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@code
{
    // Getting and setting the Pid
    [Parameter]
    public int Pid { get; set; } = 1;

    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<Posts> forumposts = new List<Posts>();
    List<Posts> forumposts_not_user = new List<Posts>();
    private string UserIdentityName = "";
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        // Get the posts
        // We access MyForumService using @Service
        forumposts = await @Service.GetPostsByPidAsync(Pid);
        forumposts_not_user = await @Service.GetOtherPostsAsync(UserIdentityName);
    }

    //Create a new post
    Posts objPosts = new Posts();
    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewPost()
    {
        // Make new forecast
        objPosts = new Posts();
        // Set Id to 0 so we know it is a new record
        objPosts.Pid = 0;
        // Open the Popup
        ShowPopup = true;
    }

    //Edit an existing post
    void EditPost(Posts post)
    {
        // Set the selected post
        // as the current post
        objPosts = post;
        // Open the Popup
        ShowPopup = true;
    }

    //Save a post (after a new post or edit post)
    async Task SavePost()
    {
        // Close the Popup
        ShowPopup = false;
        // A new forecast will have the Id set to 0
        if (objPosts.Pid == 0)
        {
            // Create new forecast
            Posts objNewPosts = new Posts();
            objNewPosts.Date = System.DateTime.Now;
            objNewPosts.Title = objPosts.Title;
            objNewPosts.Content = objPosts.Content;
            objNewPosts.UserName = UserIdentityName;
            // Save the result
            var result =
            @Service.CreatePostAsync(objNewPosts);
        }
        else
        {
            // This is an update
            var result =
            @Service.UpdatePostsAsync(objPosts);
        }
        // Get the posts for the current user
        forumposts =
        await @Service.GetPostsByPidAsync(Pid);
    }

    //Delete a post
    async Task DeletePost()
    {
        // Close the Popup
        ShowPopup = false;
        // Delete the post
        var result = @Service.DeletePostAsync(objPosts);
        // Get the posts for the current user
        NavManager.NavigateTo("/fetchdata");
    }
}

@if (ShowPopup)
{
    <!-- This is the popup to create or edit a post -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Edit Post</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                        @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current forecast -->
                <div class="modal-body">
                    <input class="form-control" type="text"
                       placeholder="Title"
                       @bind="objPosts.Title" /> 
                    <textarea class="form-control" @bind="objPosts.Content" type="text"
                         placeholder="Write your post..." />
                       <br />
                    <!-- Button to save the forecast -->
                    <button class="btn btn-success"
                        @onclick="SavePost">
                        Save
                    </button>&nbsp;
                    @if (objPosts.Pid > 0)
                    {
                        <!-- Button to delete the post -->
                        <button class="btn btn-danger"
                        @onclick="DeletePost">
                            Delete
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}
